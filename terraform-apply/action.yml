name: Terraform apply
description: Apply pre defined plan
inputs:
  chdir:
    description: 'Which folder is located the terraform files'
    required: true
  github-token:
    description: 'Github token obtain from secrets.GITHUB_TOKEN'
    required: true
runs:
  using: "composite"
  steps:
    - name: Prepare terraform
      uses: hashicorp/setup-terraform@v3

    - name: Download Terraform plan
      id: download-terraform-plan
      uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.number }}-tf-plan
        path: ${{ inputs.chdir }}

    - name: Terraform init
      id: init
      shell: bash
      run: terraform -chdir=${{ inputs.chdir }} init

    - name: Terraform apply
      id: apply
      shell: bash
      run: terraform -chdir=${{ inputs.chdir }} apply -no-color tfplan

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Apply')
          });

          const output = `#### Terraform Apply ðŸ“–\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

