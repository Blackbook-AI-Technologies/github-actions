name: Terraform plan
description: Check for format style and plan terraform
inputs:
  id:
    description: 'Used to identify the artifact id to allow multiple terraform steps in the script'
    required: true
  chdir:
    description: 'Which folder is located the terraform files'
    required: true
  github-token:
    description: 'Github token obtain from secrets.GITHUB_TOKEN'
    required: true
  workspace:
    description: 'Terraform workspace (optional)'
    required: false
runs:
  using: "composite"
  steps:
    - name: Prepare terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform fmt
      id: fmt
      shell: bash
      run: terraform fmt -check -recursive

    - name: Terraform init
      id: init
      shell: bash
      run: terraform -chdir=${{ inputs.chdir }} init

    - name: Select or create workspace
      shell: bash
      if: ${{ inputs.workspace }}
      run: terraform -chdir=${{ inputs.chdir }} workspace select -or-create ${{ inputs.workspace }}

    - name: Terraform plan
      id: plan
      shell: bash
      env:
        TF_VAR_github_token: ${{ inputs.github-token }}
        TF_VAR_github_actor: ${{ github.actor }}
        TF_WORKSPACE: ${{ inputs.workspace }}
      run: terraform -chdir=${{ inputs.chdir }} plan -no-color -out=tfplan

    - name: Save Terraform plan
      id: save-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.number }}-${{ inputs.id }}-tf-plan
        path: ${{ inputs.chdir }}/tfplan

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          });

          const output = `#### üñå  Terraform Format and Style \`${{ steps.fmt.outcome }}\`

          #### ‚öôÔ∏è  Terraform Initialization \`${{ steps.init.outcome }}\`

          #### üìñ  Terraform Plan \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

